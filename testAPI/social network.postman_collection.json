{
	"info": {
		"_postman_id": "d3ac4158-54f7-4ef9-ab6b-ee27b5c64454",
		"name": "social network",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"test response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.signup.token).to.includes('.');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation signup {\r\n    signup(email:\"huuduc{{$randomInt}}@gmail.com\",fullname:\"{{$randomFullName}}\",\r\n        username:\"{{$randomLastName}}\",password:\"123456\"\r\n    ){\r\n        token\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "signin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"token\", JSON.parse(responseBody).data.signin.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"test response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.signin.token).to.includes('.');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation signin{\r\n    signin(email:\"huuduc188@gmail.com\",password:\"123456\"){\r\n        token\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"myId\", JSON.parse(responseBody).data.me._id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"test response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.me.isMe).to.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getMe {\r\n    me{\r\n        _id\r\n        isMe\r\n        username\r\n        fullname\r\n        email\r\n        bio\r\n        avatar\r\n        postsCount\r\n        followersCount\r\n        followingsCount\r\n        followings{\r\n            fullname\r\n            isMe\r\n        }\r\n        followers{\r\n            fullname\r\n            isMe\r\n        }\r\n        posts{\r\n            _id\r\n        }\r\n        savedPosts{\r\n            caption\r\n        }\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "followe user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData)\r",
									"    pm.expect(jsonData.data.follow).to.eql(true);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation follow{\r\n    follow(userId:\"6113a3760d16d83e0867b88a\")\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "unfollow user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"test response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData)\r",
									"    pm.expect(jsonData.data.unfollow).to.eql(true);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation unfollow{\r\n    unfollow(userId:\"6113a3760d16d83e0867b88a\")\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"test response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.getProfile.isMe).to.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getProfile{\r\n    getProfile(userId:\"{{myId}}\"){\r\n        fullname\r\n        username\r\n        isMe\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"test response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.editProfile.isMe).to.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation editMyProfile {\r\n    editProfile(username:\"{{$randomLastName}}\"){\r\n        username\r\n        isMe\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get new feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getNewFeed{\r\n    feed(limit:5,cursor:\"1629729613421\"){\r\n        paging{\r\n            hasMore\r\n            nextCursor\r\n        }\r\n        posts{\r\n            _id\r\n            caption\r\n            isMine\r\n            isLiked\r\n            isSaved\r\n        }\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "suggest users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"return other user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.data.suggestUsers.forEach(post => {\r",
									"        pm.expect(post.isMe).to.eql(false);\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getSuggestUsers{\r\n    suggestUsers{\r\n        fullname\r\n        username\r\n        _id\r\n        isFollowing\r\n        isMe\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchUser{\r\n    searchUsers(searchTerm:\"k\"){\r\n        username\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "validate Email",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query validateEmail {\r\n    validateEmail(email:\"huuduc188@gmail.com\")\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "validate username",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query validateUsername{\r\n    validateUsername(username:\"Wolf\")\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "post",
			"item": [
				{
					"name": "create post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"postId\", JSON.parse(responseBody).data.createPost._id);\r",
									"\r",
									"pm.test(\"my post\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.createPost.isMine).to.eql(true);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createNewPost{\r\n    createPost(caption:\"{{$randomPhrase}}\",files:[\"{{$randomCityImage}}\",\"{{$randomFoodImage}}\"],tags:[\"{{$randomNoun}}\",\"{{$randomVerb}}\"]){\r\n        _id\r\n        caption\r\n        files\r\n        tags\r\n        isMine\r\n        user{\r\n            fullname\r\n            username\r\n            isMe\r\n            postsCount\r\n        }\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"my post\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.getPost.isMine).to.eql(true);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getPost{\r\n    getPost(postId:\"{{postId}}\"){\r\n        _id\r\n        caption\r\n        files\r\n        tags\r\n        likesCount\r\n        commentsCount\r\n        isMine\r\n        isLiked\r\n        isSaved\r\n        likes{\r\n            username\r\n        }\r\n        user{\r\n            fullname\r\n            username\r\n            avatar\r\n            isMe\r\n        }\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "toggle like post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"my post\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.toggleLike).to.eql(true);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation toggleLikePost{\r\n    toggleLike(postId:\"{{postId}}\")\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "toggle save post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"my post\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.toggleSave).to.eql(true);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation toggleLikePost{\r\n    toggleSave(postId:\"{{postId}}\")\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.deletePost).to.eql(true);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePost{\r\n    deletePost(postId:\"{{postId}}\")\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search posts",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "suggest posts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getSuggestPosts{\r\n    suggestPosts(limit:5,cursor:\"1629729613421\"){\r\n        paging{\r\n            hasMore\r\n            nextCursor\r\n        }\r\n        posts{\r\n            _id\r\n            caption\r\n            isMine\r\n            isLiked\r\n            isSaved\r\n        }\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "comment",
			"item": [
				{
					"name": "add comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"commentId\", JSON.parse(responseBody).data.addComment._id);\r",
									"pm.test(\"my Comment\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.addComment.isMine).to.eql(true);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addNewComment{\r\n    addComment(postId:\"{{postId}}\",text:\"{{$randomPhrase}}\"){\r\n        _id\r\n        text\r\n        isMine\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.deleteComment).to.eql(true);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteComment{\r\n    deleteComment(commentId:\"{{commentId}}\")\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "endpoint",
			"value": "http://localhost:5000/graphql"
		},
		{
			"key": "postId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "myId",
			"value": ""
		}
	]
}